server.port: 7000
management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"

app:
  eureka-username: admin
  eureka-password: admin

spring.cloud.stream:
  defaultBinder: kafka
  default.contentType: application/json
  bindings:
    product-out-0:
      destination: productTopic # topic/exchange name
      producer:
        required-groups: auditGroup # this property when used with Kafka, events are retained in separate topics, even after consumers have processed them.
    review-out-0:
      destination: reviewTopic
      producer:
        required-groups: auditGroup

spring.cloud.stream.kafka.binder:
  brokers: kafka
  defaultBrokerPort: 9092

# To allow observability
spring.cloud.stream.kafka.binder.enableObservation: true

spring.application.name: composite

# Replaced with Kubernetes built in DNS
#app.eureka-server: localhost
#eureka:
#  client:
#    serviceUrl:
#      defaultZone: http://${app.eureka-username}:${app.eureka-password}@${app.eureka-server}:8761/eureka/
#    initialInstanceInfoReplicationIntervalSeconds: 5
#    registryFetchIntervalSeconds: 5
#  instance:
#    preferIpAddress: true
#    leaseRenewalIntervalInSeconds: 5
#    leaseExpirationDurationInSeconds: 5

logging:
  level:
    root: ERROR
    org.springframework.web: ERROR
    com.example: DEBUG
    org.hibernate: ERROR
#swagger-ui:
#  oauth2-redirect-url: /swagger-ui/oauth2-redirect.html
#  oauth:
#    clientId: writer
#    clientSecret: secret-writer
#    useBasicAuthenticationWithAccessCodeGrant: true
#  oAuthFlow:
#    authorizationUrl: https://localhost:8443/oauth2/authorize
#    tokenUrl: https://localhost:8443/oauth2/token


# Configuration for circuit breaker, retry mechanism & time limiter
resilience4j.retry:
  instances:
    product:
      maxAttempts: 3
      waitDuration: 1000
      retryExceptions:
        - feign.FeignException
        - org.springframework.web.client.HttpServerErrorException.InternalServerError

#resilience4j.timelimiter:
#  instances:
#    product:
#      timeoutDuration: 5s

management.health.circuitbreakers.enabled: true

resilience4j.circuitbreaker:
  instances:
    product:
      allowHealthIndicatorToFail: false
      registerHealthIndicator: true
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 5
      failureRateThreshold: 50
      waitDurationInOpenState: 10000
      permittedNumberOfCallsInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      ignoreExceptions:
        - com.example.UtilService.exception.InvalidInputException
        - com.example.UtilService.exception.NotFoundException

---
spring.config.activate.on-profile: docker

server.port: 8083

spring.cloud.stream.kafka.binder.brokers: kafka


