app:
  auth-server: auth-server

# applying graceful shutdown, a microservice stops accepting new requests
# and waits for a configurable time for active requests to complete before
# it shuts down the application.
server.shutdown: graceful
spring.lifecycle.timeout-per-shutdown-phase: 10s

management.health.kafka.enabled: true
management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: health,info,circuitbreakerevents
# To briefly recap, a liveness probe tells Kubernetes if a Pod needs to be replaced,
# and a readiness probe tells Kubernetes if its Pod is ready to accept requests.
# To simplify this work, Spring Boot has added support to implement liveness and readiness probes.
# exposed on the URLs /actuator/health/liveness and /actuator/health/readiness
management.endpoint.health.probes.enabled: true
management.endpoint.health.group.readiness.include: readinessState

# Common configurations
management.zipkin.tracing.endpoint: http://zipkin:9411/api/v2/spans
management.tracing.sampling.probability: 1.0
logging.pattern.level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"