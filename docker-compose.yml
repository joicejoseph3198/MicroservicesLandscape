version: '3.9'

services:
  product:
    container_name: product
    image: microservice-landscape/product
    build: ./product-service
    mem_limit: 512M
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - config-server
      - mongodb
      - discovery
    ports:
      - "8081:8081"

  review:
    container_name: review
    image: microservice-landscape/review
    build: ./review-service
    mem_limit: 512M
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - config-server
      - mysql
      - discovery
    ports:
      - "8082:8082"

  composite:
    container_name: composite
    image: microservice-landscape/composite
    build: ./product-composite-service
    mem_limit: 512M
    depends_on:
      - config-server
      - discovery
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}

  auction:
    container_name: auction
    image: microservice-landscape/auction
    build: ./auction-service
    mem_limit: 1024m
    ports:
      - "8084:8084"
    depends_on:
      - config-server
      - mysql
      - discovery
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - kind

  mongodb:
    container_name: mongo
    image: mongo:6.0.4
    mem_limit: 512m
    volumes:
      - mongodata:/data/db
    ports:
      - "27017:27017"
    command: mongod
    healthcheck:
      test: "mongostat -n 1"
      interval: 5s
      timeout: 2s
      retries: 60
    networks:
      - kind

  mysql:
    container_name: mysql
    image: mysql:8.0.32
    mem_limit: 512m
    volumes:
      - sqldata:/var/lib/mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_USER=joice
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=reviewdb
    healthcheck:
      test: "mysql -u root -p$$MYSQL_ROOT_PASSWORD  -e 'SHOW DATABASES'"
      interval: 5s
      timeout: 2s
      retries: 60
    networks:
      - kind

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.3.1
    restart: always
    mem_limit: 1024m
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    networks:
      - kind

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.3.1
    restart: always
    mem_limit: 512m
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - kind

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    mem_limit: 512m
    ports:
      - "8885:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - kind

  auth-server:
    container_name: auth-server
    image: microservice-landscape/auth-server
    build: ./authorization-server
    mem_limit: 512M
    ports:
      - "9999:9999"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - config-server
      - discovery
    healthcheck:
      test: [ "CMD", "curl", "-fs", "http://localhost:9999/actuator/health" ]
      interval: 5s
      timeout: 2s
      retries: 60

  discovery:
    container_name: discovery
    image: microservice-landscape/discovery
    build: ./discovery-service
    depends_on:
      - config-server
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    ports:
    - "8761:8761"

  gateway:
    container_name: gateway
    image: microservice-landscape/gateway
    build: ./gateway-service
    mem_limit: 512m
    depends_on:
      - config-server
      - auth-server
      - discovery
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    ports:
      - "8443:8443"

  config-server:
    container_name: config-server
    image: microservice-landscape/config-server
    build: ./config-server
    mem_limit: 512m
    environment:
      # native, is added to signal to the config server that the config repository is
      # based on local files
      - SPRING_PROFILES_ACTIVE=docker,native
      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    ports:
      - "8888:8888"

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin:2.24.0
    restart: always
    mem_limit: 1024m
    environment:
      - STORAGE_TYPE=elasticsearch
      - ES_HOSTS=elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
     - "9411:9411"
    networks:
     - kind

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - kind

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - kind

  logstash:
    image: docker.elastic.co/logstash/logstash:7.14.0
    container_name: logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - elasticsearch-data:/usr/share/elasticsearch/data  # Shared volume with Elasticsearch
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - kind

  kibana:
    image: docker.elastic.co/kibana/kibana:7.14.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - kind
#  redis:
#    image: redis:6.2-alpine
#    restart: always
#    mem_limit: 512m
#    ports:
#      - '6379:6379'
#    healthcheck:
#      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
#      interval: 1s
#      timeout: 3s
#      retries: 5
#    command: redis-server --save 20 1 --loglevel warning
#    volumes:
#      - cache:/data/cache
volumes:
  sqldata:
  mongodata:
  cache:
  elasticsearch-data:
  logstash-data:

networks:
  kind:
    external: true